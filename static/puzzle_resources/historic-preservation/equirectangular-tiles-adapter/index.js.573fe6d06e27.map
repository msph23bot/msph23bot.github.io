{"version":3,"sources":["@photo-sphere-viewer/core","three","src/index.ts","src/EquirectangularTilesAdapter.ts","../shared/Queue.ts","../shared/tiles-utils.ts"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","export { EquirectangularTilesAdapter } from './EquirectangularTilesAdapter';\nexport * from './model';\n","import type { TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractAdapter, CONSTANTS, EquirectangularAdapter, events, PSVError, utils } from '@photo-sphere-viewer/core';\nimport {\n    BufferAttribute,\n    Frustum,\n    ImageLoader,\n    MathUtils,\n    Matrix4,\n    Mesh,\n    MeshBasicMaterial,\n    SphereGeometry,\n    Texture,\n    Vector3,\n} from 'three';\nimport { Queue, Task } from '../../shared/Queue';\nimport { buildErrorMaterial } from '../../shared/tiles-utils';\nimport { EquirectangularTilesAdapterConfig, EquirectangularTilesPanorama } from './model';\n\n/* the faces of the top and bottom rows are made of a single triangle (3 vertices)\n * all other faces are made of two triangles (6 vertices)\n * bellow is the indexing of each face vertices\n *\n * first row faces:\n *     ⋀\n *    /0\\\n *   /   \\\n *  /     \\\n * /1     2\\\n * ¯¯¯¯¯¯¯¯¯\n *\n * other rows faces:\n * _________\n * |\\1    0|\n * |3\\     |\n * |  \\    |\n * |   \\   |\n * |    \\  |\n * |     \\2|\n * |4    5\\|\n * ¯¯¯¯¯¯¯¯¯\n *\n * last row faces:\n * _________\n * \\1     0/\n *  \\     /\n *   \\   /\n *    \\2/\n *     ⋁\n */\n\ntype EquirectangularMesh = Mesh<SphereGeometry, MeshBasicMaterial[]>;\ntype EquirectangularTexture = TextureData<Texture>;\ntype EquirectangularTile = { col: number; row: number; angle: number };\n\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_SMALL_FACE = 3;\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile: EquirectangularTile): string {\n    return `${tile.col}x${tile.row}`;\n}\n\nconst getConfig = utils.getConfigParser<EquirectangularTilesAdapterConfig>(\n    {\n        resolution: 64,\n        showErrorTile: true,\n        baseBlur: true,\n        blur: false,\n    },\n    {\n        resolution: (resolution) => {\n            if (!resolution || !MathUtils.isPowerOfTwo(resolution)) {\n                throw new PSVError('EquirectangularTilesAdapter resolution must be power of two');\n            }\n            return resolution;\n        },\n    }\n);\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n/**\n * Adapter for tiled panoramas\n */\nexport class EquirectangularTilesAdapter extends AbstractAdapter<EquirectangularTilesPanorama, Texture> {\n    static override readonly id = 'equirectangular-tiles';\n    static override readonly supportsDownload = false;\n    static override readonly supportsOverlay = false;\n\n    private readonly SPHERE_SEGMENTS: number;\n    private readonly SPHERE_HORIZONTAL_SEGMENTS: number;\n    private readonly NB_VERTICES: number;\n    private readonly NB_GROUPS: number;\n\n    private readonly config: EquirectangularTilesAdapterConfig;\n\n    private readonly state = {\n        colSize: 0,\n        rowSize: 0,\n        facesByCol: 0,\n        facesByRow: 0,\n        tiles: {} as Record<string, boolean>,\n        geom: null as SphereGeometry,\n        materials: [] as MeshBasicMaterial[],\n        errorMaterial: null as MeshBasicMaterial,\n    };\n\n    private adapter: EquirectangularAdapter;\n    private readonly queue = new Queue();\n    private readonly loader?: ImageLoader;\n\n    constructor(viewer: Viewer, config: EquirectangularTilesAdapterConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        this.viewer.config.useXmpData = false;\n\n        this.SPHERE_SEGMENTS = this.config.resolution;\n        this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n        this.NB_VERTICES = 2 * this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n            + (this.SPHERE_HORIZONTAL_SEGMENTS - 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n        this.NB_GROUPS = this.SPHERE_SEGMENTS * this.SPHERE_HORIZONTAL_SEGMENTS;\n\n        if (this.viewer.config.requestHeaders) {\n            utils.logWarn(\n                'EquirectangularTilesAdapter fallbacks to file loader because \"requestHeaders\" where provided. ' +\n                    'Consider removing \"requestHeaders\" if you experience performances issues.'\n            );\n        } else {\n            this.loader = new ImageLoader();\n            if (this.viewer.config.withCredentials) {\n                this.loader.setWithCredentials(true);\n            }\n        }\n\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n\n        this.__cleanup();\n\n        this.state.errorMaterial?.map?.dispose();\n        this.state.errorMaterial?.dispose();\n\n        delete this.state.geom;\n        delete this.state.errorMaterial;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.PositionUpdatedEvent || e instanceof events.ZoomUpdatedEvent) {\n            this.__refresh();\n        }\n    }\n\n    override supportsTransition(panorama: EquirectangularTilesPanorama) {\n        return !!panorama.baseUrl;\n    }\n\n    override supportsPreload(panorama: EquirectangularTilesPanorama) {\n        return !!panorama.baseUrl;\n    }\n\n    override loadTexture(panorama: EquirectangularTilesPanorama): Promise<EquirectangularTexture> {\n        if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\n            return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n        }\n        if (panorama.cols > this.SPHERE_SEGMENTS) {\n            return Promise.reject(new PSVError(`Panorama cols must not be greater than ${this.SPHERE_SEGMENTS}.`));\n        }\n        if (panorama.rows > this.SPHERE_HORIZONTAL_SEGMENTS) {\n            return Promise.reject(\n                new PSVError(`Panorama rows must not be greater than ${this.SPHERE_HORIZONTAL_SEGMENTS}.`)\n            );\n        }\n        if (!MathUtils.isPowerOfTwo(panorama.cols) || !MathUtils.isPowerOfTwo(panorama.rows)) {\n            return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\n        }\n\n        const panoData = {\n            fullWidth: panorama.width,\n            fullHeight: panorama.width / 2,\n            croppedWidth: panorama.width,\n            croppedHeight: panorama.width / 2,\n            croppedX: 0,\n            croppedY: 0,\n            poseHeading: 0,\n            posePitch: 0,\n            poseRoll: 0,\n        };\n\n        if (panorama.baseUrl) {\n            if (!this.adapter) {\n                this.adapter = new EquirectangularAdapter(this.viewer, {\n                    blur: this.config.baseBlur,\n                });\n            }\n\n            return this.adapter.loadTexture(panorama.baseUrl, panorama.basePanoData).then((textureData) => ({\n                panorama: panorama,\n                texture: textureData.texture,\n                panoData: panoData,\n            }));\n        } else {\n            return Promise.resolve({ panorama, panoData, texture: null });\n        }\n    }\n\n    createMesh(scale = 1): EquirectangularMesh {\n        const geometry = new SphereGeometry(\n            CONSTANTS.SPHERE_RADIUS * scale,\n            this.SPHERE_SEGMENTS,\n            this.SPHERE_HORIZONTAL_SEGMENTS,\n            -Math.PI / 2\n        )\n            .scale(-1, 1, 1)\n            .toNonIndexed() as SphereGeometry;\n\n        geometry.clearGroups();\n        let i = 0;\n        let k = 0;\n        // first row\n        for (; i < this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE; i += NB_VERTICES_BY_SMALL_FACE) {\n            geometry.addGroup(i, NB_VERTICES_BY_SMALL_FACE, k++);\n        }\n        // second to before last rows\n        for (; i < this.NB_VERTICES - this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE; i += NB_VERTICES_BY_FACE) {\n            geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n        }\n        // last row\n        for (; i < this.NB_VERTICES; i += NB_VERTICES_BY_SMALL_FACE) {\n            geometry.addGroup(i, NB_VERTICES_BY_SMALL_FACE, k++);\n        }\n\n        geometry.setAttribute(ATTR_ORIGINAL_UV, (geometry.getAttribute(ATTR_UV) as BufferAttribute).clone());\n\n        return new Mesh(geometry, []);\n    }\n\n    /**\n     * Applies the base texture and starts the loading of tiles\n     */\n    setTexture(mesh: EquirectangularMesh, textureData: EquirectangularTexture, transition: boolean) {\n        const { panorama, texture } = textureData;\n\n        if (transition) {\n            this.__setTexture(mesh, texture);\n            return;\n        }\n\n        this.__cleanup();\n        this.__setTexture(mesh, texture);\n\n        this.state.materials = mesh.material;\n        this.state.geom = mesh.geometry;\n        this.state.geom.setAttribute(ATTR_UV, (this.state.geom.getAttribute(ATTR_ORIGINAL_UV) as BufferAttribute).clone());\n\n        this.state.colSize = panorama.width / panorama.cols;\n        this.state.rowSize = panorama.width / 2 / panorama.rows;\n        this.state.facesByCol = this.SPHERE_SEGMENTS / panorama.cols;\n        this.state.facesByRow = this.SPHERE_HORIZONTAL_SEGMENTS / panorama.rows;\n\n        // this.psv.renderer.scene.add(createWireFrame(this.state.geom));\n\n        setTimeout(() => this.__refresh(true));\n    }\n\n    private __setTexture(mesh: EquirectangularMesh, texture: Texture) {\n        let material;\n        if (texture) {\n            material = new MeshBasicMaterial({ map: texture });\n        } else {\n            material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n        }\n\n        for (let i = 0; i < this.NB_GROUPS; i++) {\n            mesh.material.push(material);\n        }\n    }\n\n    setTextureOpacity(mesh: EquirectangularMesh, opacity: number) {\n        mesh.material[0].opacity = opacity;\n        mesh.material[0].transparent = opacity < 1;\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     */\n    setOverlay() {\n        throw new PSVError('EquirectangularTilesAdapter does not support overlay');\n    }\n\n    disposeTexture(textureData: TextureData<Texture>) {\n        textureData.texture?.dispose();\n    }\n\n    /**\n     * Compute visible tiles and load them\n     */\n    // @ts-ignore unused paramater\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private __refresh(init = false) {\n        if (!this.state.geom) {\n            return;\n        }\n\n        const camera = this.viewer.renderer.camera;\n        camera.updateMatrixWorld();\n        projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        frustum.setFromProjectionMatrix(projScreenMatrix);\n\n        const panorama: EquirectangularTilesPanorama = this.viewer.config.panorama;\n        const verticesPosition = this.state.geom.getAttribute(ATTR_POSITION) as BufferAttribute;\n        const tilesToLoad = [];\n\n        for (let col = 0; col < panorama.cols; col++) {\n            for (let row = 0; row < panorama.rows; row++) {\n                // for each tile, find the vertices corresponding to the four corners (three for first and last rows)\n                // if at least one vertex is visible, the tile must be loaded\n                // for larger tiles we also test the four edges centers and the tile center\n\n                const verticesIndex = [];\n\n                if (row === 0) {\n                    // bottom-left\n                    const v0 = this.state.facesByRow === 1\n                        ? col * this.state.facesByCol * NB_VERTICES_BY_SMALL_FACE + 1\n                        : this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                            + (this.state.facesByRow - 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE\n                            + col * this.state.facesByCol * NB_VERTICES_BY_FACE + 4;\n\n                    // bottom-right\n                    const v1 = this.state.facesByRow === 1\n                        ? v0 + (this.state.facesByCol - 1) * NB_VERTICES_BY_SMALL_FACE + 1\n                        : v0 + (this.state.facesByCol - 1) * NB_VERTICES_BY_FACE + 1;\n\n                    // top (all vertices are equal)\n                    const v2 = 0;\n\n                    verticesIndex.push(v0, v1, v2);\n\n                    if (this.state.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n                        // bottom-center\n                        const v4 = v0 + (this.state.facesByCol / 2) * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v4);\n                    }\n\n                    if (this.state.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n                        // left-center\n                        const v6 = v0 - (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        // right-center\n                        const v7 = v1 - (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v6, v7);\n                    }\n                } else if (row === panorama.rows - 1) {\n                    // top-left\n                    const v0 = this.state.facesByRow === 1\n                        ? -this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                            + row * this.state.facesByRow * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE\n                            + col * this.state.facesByCol * NB_VERTICES_BY_SMALL_FACE + 1\n                        : -this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                            + row * this.state.facesByRow * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE\n                            + col * this.state.facesByCol * NB_VERTICES_BY_FACE + 1;\n\n                    // top-right\n                    const v1 = this.state.facesByRow === 1\n                        ? v0 + (this.state.facesByCol - 1) * NB_VERTICES_BY_SMALL_FACE - 1\n                        : v0 + (this.state.facesByCol - 1) * NB_VERTICES_BY_FACE - 1;\n\n                    // bottom (all vertices are equal)\n                    const v2 = this.NB_VERTICES - 1;\n\n                    verticesIndex.push(v0, v1, v2);\n\n                    if (this.state.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n                        // top-center\n                        const v4 = v0 + (this.state.facesByCol / 2) * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v4);\n                    }\n\n                    if (this.state.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n                        // left-center\n                        const v6 = v0 + (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        // right-center\n                        const v7 = v1 + (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v6, v7);\n                    }\n                } else {\n                    // top-left\n                    const v0 = -this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                        + row * this.state.facesByRow * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE\n                        + col * this.state.facesByCol * NB_VERTICES_BY_FACE + 1;\n\n                    // bottom-left\n                    const v1 = v0 + (this.state.facesByRow - 1) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE + 3;\n\n                    // bottom-right\n                    const v2 = v1 + (this.state.facesByCol - 1) * NB_VERTICES_BY_FACE + 1;\n\n                    // top-right\n                    const v3 = v0 + (this.state.facesByCol - 1) * NB_VERTICES_BY_FACE - 1;\n\n                    verticesIndex.push(v0, v1, v2, v3);\n\n                    if (this.state.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n                        // top-center\n                        const v4 = v0 + (this.state.facesByCol / 2) * NB_VERTICES_BY_FACE;\n\n                        // bottom-center\n                        const v5 = v1 + (this.state.facesByCol / 2) * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v4, v5);\n                    }\n\n                    if (this.state.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n                        // left-center\n                        const v6 = v0 + (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        // right-center\n                        const v7 = v3 + (this.state.facesByRow / 2) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v6, v7);\n\n                        if (this.state.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n                            // center-center\n                            const v8 = v6 + (this.state.facesByCol / 2) * NB_VERTICES_BY_FACE;\n\n                            verticesIndex.push(v8);\n                        }\n                    }\n                }\n\n                // if (init && col === 0 && row === 0) {\n                //   verticesIndex.forEach((vertexIdx) => {\n                //     this.psv.renderer.scene.add(createDot(\n                //       verticesPosition.getX(vertexIdx),\n                //       verticesPosition.getY(vertexIdx),\n                //       verticesPosition.getZ(vertexIdx)\n                //     ));\n                //   });\n                // }\n\n                const vertexVisible = verticesIndex.some((vertexIdx) => {\n                    vertexPosition.set(\n                        verticesPosition.getX(vertexIdx),\n                        verticesPosition.getY(vertexIdx),\n                        verticesPosition.getZ(vertexIdx)\n                    );\n                    vertexPosition.applyEuler(this.viewer.renderer.sphereCorrection);\n                    return frustum.containsPoint(vertexPosition);\n                });\n\n                if (vertexVisible) {\n                    let angle = vertexPosition.angleTo(this.viewer.state.direction);\n                    if (row === 0 || row === panorama.rows - 1) {\n                        angle *= 2; // lower priority to top and bottom tiles\n                    }\n                    tilesToLoad.push({ col, row, angle });\n                }\n            }\n        }\n\n        this.__loadTiles(tilesToLoad);\n    }\n\n    /**\n     * Loads tiles and change existing tiles priority\n     */\n    private __loadTiles(tiles: EquirectangularTile[]) {\n        this.queue.disableAllTasks();\n\n        tiles.forEach((tile) => {\n            const id = tileId(tile);\n\n            if (this.state.tiles[id]) {\n                this.queue.setPriority(id, tile.angle);\n            } else {\n                this.state.tiles[id] = true;\n                this.queue.enqueue(new Task(id, tile.angle, (task) => this.__loadTile(tile, task)));\n            }\n        });\n\n        this.queue.start();\n    }\n\n    /**\n     * Loads and draw a tile\n     */\n    private __loadTile(tile: EquirectangularTile, task: Task): Promise<any> {\n        const panorama: EquirectangularTilesPanorama = this.viewer.config.panorama;\n        const url = panorama.tileUrl(tile.col, tile.row);\n\n        if (!url) {\n            return Promise.resolve();\n        }\n\n        return this.__loadImage(url)\n            .then((image) => {\n                if (!task.isCancelled()) {\n                    const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n                    this.__swapMaterial(tile.col, tile.row, material);\n                    this.viewer.needsUpdate();\n                }\n            })\n            .catch(() => {\n                if (!task.isCancelled() && this.config.showErrorTile) {\n                    if (!this.state.errorMaterial) {\n                        this.state.errorMaterial = buildErrorMaterial(this.state.colSize, this.state.rowSize);\n                    }\n                    this.__swapMaterial(tile.col, tile.row, this.state.errorMaterial);\n                    this.viewer.needsUpdate();\n                }\n            });\n    }\n\n    private __loadImage(url: string): Promise<HTMLImageElement> {\n        if (this.loader) {\n            return new Promise((resolve, reject) => {\n                this.loader.load(url, resolve, undefined, reject);\n            });\n        } else {\n            return this.viewer.textureLoader.loadImage(url);\n        }\n    }\n\n    /**\n     * Applies a new texture to the faces\n     */\n    private __swapMaterial(col: number, row: number, material: MeshBasicMaterial) {\n        const uvs = this.state.geom.getAttribute(ATTR_UV) as BufferAttribute;\n\n        for (let c = 0; c < this.state.facesByCol; c++) {\n            for (let r = 0; r < this.state.facesByRow; r++) {\n                // position of the face (two triangles of the same square)\n                const faceCol = col * this.state.facesByCol + c;\n                const faceRow = row * this.state.facesByRow + r;\n                const isFirstRow = faceRow === 0;\n                const isLastRow = faceRow === (this.SPHERE_HORIZONTAL_SEGMENTS - 1);\n\n                // first vertex for this face (3 or 6 vertices in total)\n                let firstVertex: number;\n                if (isFirstRow) {\n                    firstVertex = faceCol * NB_VERTICES_BY_SMALL_FACE;\n                } else if (isLastRow) {\n                    firstVertex = this.NB_VERTICES\n                        - this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                        + faceCol * NB_VERTICES_BY_SMALL_FACE;\n                } else {\n                    firstVertex = this.SPHERE_SEGMENTS * NB_VERTICES_BY_SMALL_FACE\n                        + (faceRow - 1) * this.SPHERE_SEGMENTS * NB_VERTICES_BY_FACE\n                        + faceCol * NB_VERTICES_BY_FACE;\n                }\n\n                // swap material\n                const matIndex = this.state.geom.groups.find((g) => g.start === firstVertex).materialIndex;\n                this.state.materials[matIndex] = material;\n\n                // define new uvs\n                const top = 1 - r / this.state.facesByRow;\n                const bottom = 1 - (r + 1) / this.state.facesByRow;\n                const left = c / this.state.facesByCol;\n                const right = (c + 1) / this.state.facesByCol;\n\n                if (isFirstRow) {\n                    uvs.setXY(firstVertex, (left + right) / 2, top);\n                    uvs.setXY(firstVertex + 1, left, bottom);\n                    uvs.setXY(firstVertex + 2, right, bottom);\n                } else if (isLastRow) {\n                    uvs.setXY(firstVertex, right, top);\n                    uvs.setXY(firstVertex + 1, left, top);\n                    uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\n                } else {\n                    uvs.setXY(firstVertex, right, top);\n                    uvs.setXY(firstVertex + 1, left, top);\n                    uvs.setXY(firstVertex + 2, right, bottom);\n                    uvs.setXY(firstVertex + 3, left, top);\n                    uvs.setXY(firstVertex + 4, left, bottom);\n                    uvs.setXY(firstVertex + 5, right, bottom);\n                }\n            }\n        }\n\n        uvs.needsUpdate = true;\n    }\n\n    /**\n     * Clears loading queue, dispose all materials\n     */\n    private __cleanup() {\n        this.queue.clear();\n        this.state.tiles = {};\n\n        this.state.materials.forEach((mat) => {\n            mat?.map?.dispose();\n            mat?.dispose();\n        });\n        this.state.materials.length = 0;\n    }\n}\n","/**\n * @internal\n */\nconst enum Status {\n    DISABLED,\n    PENDING,\n    RUNNING,\n    CANCELLED,\n    DONE,\n    ERROR,\n}\n\n/**\n * @internal\n */\nexport class Task {\n    status: Status = Status.PENDING;\n\n    constructor(\n        public readonly id: string,\n        public priority: number,\n        private readonly fn: (task: Task) => Promise<any>\n    ) {}\n\n    start() {\n        this.status = Status.RUNNING;\n        return this.fn(this).then(\n            () => {\n                this.status = Status.DONE;\n            },\n            () => {\n                this.status = Status.ERROR;\n            }\n        );\n    }\n\n    cancel() {\n        this.status = Status.CANCELLED;\n    }\n\n    isCancelled() {\n        return this.status === Status.CANCELLED;\n    }\n}\n\n/**\n * @internal\n */\nexport class Queue {\n    private runningTasks: Record<string, boolean> = {};\n    private tasks: Record<string, Task> = {};\n\n    constructor(private readonly concurency = 4) {}\n\n    enqueue(task: Task) {\n        this.tasks[task.id] = task;\n    }\n\n    clear() {\n        Object.values(this.tasks).forEach((task) => task.cancel());\n        this.tasks = {};\n        this.runningTasks = {};\n    }\n\n    setPriority(taskId: string, priority: number) {\n        const task = this.tasks[taskId];\n        if (task) {\n            task.priority = priority;\n            if (task.status === Status.DISABLED) {\n                task.status = Status.PENDING;\n            }\n        }\n    }\n\n    disableAllTasks() {\n        Object.values(this.tasks).forEach((task) => {\n            task.status = Status.DISABLED;\n        });\n    }\n\n    start() {\n        if (Object.keys(this.runningTasks).length >= this.concurency) {\n            return;\n        }\n\n        const nextTask = Object.values(this.tasks)\n            .filter((task) => task.status === Status.PENDING)\n            .sort((a, b) => b.priority - a.priority)\n            .pop();\n\n        if (nextTask) {\n            this.runningTasks[nextTask.id] = true;\n\n            nextTask.start().then(() => {\n                if (!nextTask.isCancelled()) {\n                    delete this.tasks[nextTask.id];\n                    delete this.runningTasks[nextTask.id];\n                    this.start();\n                }\n            });\n\n            this.start(); // start tasks until max concurrency is reached\n        }\n    }\n}\n","import {\n    BufferGeometry,\n    CanvasTexture,\n    LineSegments,\n    Material,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    SphereGeometry,\n    WireframeGeometry,\n} from 'three';\n\n/**\n * Generates an material for errored tiles\n * @internal\n */\nexport function buildErrorMaterial(width: number, height: number): MeshBasicMaterial {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = '#333';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.font = `${canvas.width / 5}px serif`;\n    ctx.fillStyle = '#a22';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n    const texture = new CanvasTexture(canvas);\n    return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * Creates a wireframe geometry, for debug\n * @internal\n */\nexport function createWireFrame(geometry: BufferGeometry): Object3D {\n    const wireframe = new WireframeGeometry(geometry);\n    const line = new LineSegments<WireframeGeometry, Material>(wireframe);\n    line.material.depthTest = false;\n    line.material.opacity = 0.25;\n    line.material.transparent = true;\n    return line;\n}\n\n/**\n * Creates a small red sphere, for debug\n * @internal\n */\nexport function createDot(x: number, y: number, z: number) {\n    const geom = new SphereGeometry(0.1);\n    const material = new MeshBasicMaterial({ color: 0xff0000 });\n    const mesh = new Mesh(geom, material);\n    mesh.position.set(x, y, z);\n    return mesh;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,aAAO,UAAU;AAAA;AAAA;;;ACAjB;AAAA;AAAA,aAAO,UAAU;AAAA;AAAA;;;ACAjB;AAAA;AAAA;AAAA;;;ACCA,oBAA4F;AAC5F,MAAAA,gBAWO;;;ACEA,MAAM,OAAN,MAAW;AAAA,IAGd,YACoB,IACT,UACU,IACnB;AAHkB;AACT;AACU;AALrB,oBAAiB;AAAA,IAMd;AAAA,IAEH,QAAQ;AACJ,WAAK,SAAS;AACd,aAAO,KAAK,GAAG,IAAI,EAAE;AAAA,QACjB,MAAM;AACF,eAAK,SAAS;AAAA,QAClB;AAAA,QACA,MAAM;AACF,eAAK,SAAS;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,SAAS;AACL,WAAK,SAAS;AAAA,IAClB;AAAA,IAEA,cAAc;AACV,aAAO,KAAK,WAAW;AAAA,IAC3B;AAAA,EACJ;AAKO,MAAM,QAAN,MAAY;AAAA,IAIf,YAA6B,aAAa,GAAG;AAAhB;AAH7B,WAAQ,eAAwC,CAAC;AACjD,WAAQ,QAA8B,CAAC;AAAA,IAEO;AAAA,IAE9C,QAAQ,MAAY;AAChB,WAAK,MAAM,KAAK,EAAE,IAAI;AAAA,IAC1B;AAAA,IAEA,QAAQ;AACJ,aAAO,OAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,SAAS,KAAK,OAAO,CAAC;AACzD,WAAK,QAAQ,CAAC;AACd,WAAK,eAAe,CAAC;AAAA,IACzB;AAAA,IAEA,YAAY,QAAgB,UAAkB;AAC1C,YAAM,OAAO,KAAK,MAAM,MAAM;AAC9B,UAAI,MAAM;AACN,aAAK,WAAW;AAChB,YAAI,KAAK,WAAW,kBAAiB;AACjC,eAAK,SAAS;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,kBAAkB;AACd,aAAO,OAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,SAAS;AACxC,aAAK,SAAS;AAAA,MAClB,CAAC;AAAA,IACL;AAAA,IAEA,QAAQ;AACJ,UAAI,OAAO,KAAK,KAAK,YAAY,EAAE,UAAU,KAAK,YAAY;AAC1D;AAAA,MACJ;AAEA,YAAM,WAAW,OAAO,OAAO,KAAK,KAAK,EACpC,OAAO,CAAC,SAAS,KAAK,WAAW,eAAc,EAC/C,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ,EACtC,IAAI;AAET,UAAI,UAAU;AACV,aAAK,aAAa,SAAS,EAAE,IAAI;AAEjC,iBAAS,MAAM,EAAE,KAAK,MAAM;AACxB,cAAI,CAAC,SAAS,YAAY,GAAG;AACzB,mBAAO,KAAK,MAAM,SAAS,EAAE;AAC7B,mBAAO,KAAK,aAAa,SAAS,EAAE;AACpC,iBAAK,MAAM;AAAA,UACf;AAAA,QACJ,CAAC;AAED,aAAK,MAAM;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;;;ACxGA,qBAUO;AAMA,WAAS,mBAAmB,OAAe,QAAmC;AACjF,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,UAAM,MAAM,OAAO,WAAW,IAAI;AAElC,QAAI,YAAY;AAChB,QAAI,SAAS,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AAC9C,QAAI,OAAO,GAAG,OAAO,QAAQ;AAC7B,QAAI,YAAY;AAChB,QAAI,YAAY;AAChB,QAAI,eAAe;AACnB,QAAI,SAAS,UAAK,OAAO,QAAQ,GAAG,OAAO,SAAS,CAAC;AAErD,UAAM,UAAU,IAAI,2BAAc,MAAM;AACxC,WAAO,IAAI,+BAAkB,EAAE,KAAK,QAAQ,CAAC;AAAA,EACjD;;;AFqBA,MAAM,sBAAsB;AAC5B,MAAM,4BAA4B;AAElC,MAAM,UAAU;AAChB,MAAM,mBAAmB;AACzB,MAAM,gBAAgB;AAEtB,WAAS,OAAO,MAAmC;AAC/C,WAAO,GAAG,KAAK,OAAO,KAAK;AAAA,EAC/B;AAEA,MAAM,YAAY,kBAAM;AAAA,IACpB;AAAA,MACI,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,UAAU;AAAA,MACV,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,YAAY,CAAC,eAAe;AACxB,YAAI,CAAC,cAAc,CAAC,wBAAU,aAAa,UAAU,GAAG;AACpD,gBAAM,IAAI,qBAAS,6DAA6D;AAAA,QACpF;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAEA,MAAM,UAAU,IAAI,sBAAQ;AAC5B,MAAM,mBAAmB,IAAI,sBAAQ;AACrC,MAAM,iBAAiB,IAAI,sBAAQ;AAK5B,MAAM,8BAAN,cAA0C,4BAAuD;AAAA,IA2BpG,YAAY,QAAgB,QAA2C;AACnE,YAAM,MAAM;AAhBhB,WAAiB,QAAQ;AAAA,QACrB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,OAAO,CAAC;AAAA,QACR,MAAM;AAAA,QACN,WAAW,CAAC;AAAA,QACZ,eAAe;AAAA,MACnB;AAGA,WAAiB,QAAQ,IAAI,MAAM;AAM/B,WAAK,SAAS,UAAU,MAAM;AAE9B,WAAK,OAAO,OAAO,aAAa;AAEhC,WAAK,kBAAkB,KAAK,OAAO;AACnC,WAAK,6BAA6B,KAAK,kBAAkB;AACzD,WAAK,cAAc,IAAI,KAAK,kBAAkB,6BACvC,KAAK,6BAA6B,KAAK,KAAK,kBAAkB;AACrE,WAAK,YAAY,KAAK,kBAAkB,KAAK;AAE7C,UAAI,KAAK,OAAO,OAAO,gBAAgB;AACnC,0BAAM;AAAA,UACF;AAAA,QAEJ;AAAA,MACJ,OAAO;AACH,aAAK,SAAS,IAAI,0BAAY;AAC9B,YAAI,KAAK,OAAO,OAAO,iBAAiB;AACpC,eAAK,OAAO,mBAAmB,IAAI;AAAA,QACvC;AAAA,MACJ;AAEA,WAAK,OAAO,iBAAiB,mBAAO,qBAAqB,MAAM,IAAI;AACnE,WAAK,OAAO,iBAAiB,mBAAO,iBAAiB,MAAM,IAAI;AAAA,IACnE;AAAA,IAES,UAAU;AACf,WAAK,OAAO,iBAAiB,mBAAO,qBAAqB,MAAM,IAAI;AACnE,WAAK,OAAO,iBAAiB,mBAAO,iBAAiB,MAAM,IAAI;AAE/D,WAAK,UAAU;AAEf,WAAK,MAAM,eAAe,KAAK,QAAQ;AACvC,WAAK,MAAM,eAAe,QAAQ;AAElC,aAAO,KAAK,MAAM;AAClB,aAAO,KAAK,MAAM;AAElB,YAAM,QAAQ;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAKA,YAAY,GAAU;AAClB,UAAI,aAAa,mBAAO,wBAAwB,aAAa,mBAAO,kBAAkB;AAClF,aAAK,UAAU;AAAA,MACnB;AAAA,IACJ;AAAA,IAES,mBAAmB,UAAwC;AAChE,aAAO,CAAC,CAAC,SAAS;AAAA,IACtB;AAAA,IAES,gBAAgB,UAAwC;AAC7D,aAAO,CAAC,CAAC,SAAS;AAAA,IACtB;AAAA,IAES,YAAY,UAAyE;AAC1F,UAAI,OAAO,aAAa,YAAY,CAAC,SAAS,SAAS,CAAC,SAAS,QAAQ,CAAC,SAAS,QAAQ,CAAC,SAAS,SAAS;AAC1G,eAAO,QAAQ,OAAO,IAAI,qBAAS,kEAAkE,CAAC;AAAA,MAC1G;AACA,UAAI,SAAS,OAAO,KAAK,iBAAiB;AACtC,eAAO,QAAQ,OAAO,IAAI,qBAAS,0CAA0C,KAAK,kBAAkB,CAAC;AAAA,MACzG;AACA,UAAI,SAAS,OAAO,KAAK,4BAA4B;AACjD,eAAO,QAAQ;AAAA,UACX,IAAI,qBAAS,0CAA0C,KAAK,6BAA6B;AAAA,QAC7F;AAAA,MACJ;AACA,UAAI,CAAC,wBAAU,aAAa,SAAS,IAAI,KAAK,CAAC,wBAAU,aAAa,SAAS,IAAI,GAAG;AAClF,eAAO,QAAQ,OAAO,IAAI,qBAAS,6CAA6C,CAAC;AAAA,MACrF;AAEA,YAAM,WAAW;AAAA,QACb,WAAW,SAAS;AAAA,QACpB,YAAY,SAAS,QAAQ;AAAA,QAC7B,cAAc,SAAS;AAAA,QACvB,eAAe,SAAS,QAAQ;AAAA,QAChC,UAAU;AAAA,QACV,UAAU;AAAA,QACV,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,MACd;AAEA,UAAI,SAAS,SAAS;AAClB,YAAI,CAAC,KAAK,SAAS;AACf,eAAK,UAAU,IAAI,mCAAuB,KAAK,QAAQ;AAAA,YACnD,MAAM,KAAK,OAAO;AAAA,UACtB,CAAC;AAAA,QACL;AAEA,eAAO,KAAK,QAAQ,YAAY,SAAS,SAAS,SAAS,YAAY,EAAE,KAAK,CAAC,iBAAiB;AAAA,UAC5F;AAAA,UACA,SAAS,YAAY;AAAA,UACrB;AAAA,QACJ,EAAE;AAAA,MACN,OAAO;AACH,eAAO,QAAQ,QAAQ,EAAE,UAAU,UAAU,SAAS,KAAK,CAAC;AAAA,MAChE;AAAA,IACJ;AAAA,IAEA,WAAW,QAAQ,GAAwB;AACvC,YAAM,WAAW,IAAI;AAAA,QACjB,sBAAU,gBAAgB;AAAA,QAC1B,KAAK;AAAA,QACL,KAAK;AAAA,QACL,CAAC,KAAK,KAAK;AAAA,MACf,EACK,MAAM,IAAI,GAAG,CAAC,EACd,aAAa;AAElB,eAAS,YAAY;AACrB,UAAI,IAAI;AACR,UAAI,IAAI;AAER,aAAO,IAAI,KAAK,kBAAkB,2BAA2B,KAAK,2BAA2B;AACzF,iBAAS,SAAS,GAAG,2BAA2B,GAAG;AAAA,MACvD;AAEA,aAAO,IAAI,KAAK,cAAc,KAAK,kBAAkB,2BAA2B,KAAK,qBAAqB;AACtG,iBAAS,SAAS,GAAG,qBAAqB,GAAG;AAAA,MACjD;AAEA,aAAO,IAAI,KAAK,aAAa,KAAK,2BAA2B;AACzD,iBAAS,SAAS,GAAG,2BAA2B,GAAG;AAAA,MACvD;AAEA,eAAS,aAAa,kBAAmB,SAAS,aAAa,OAAO,EAAsB,MAAM,CAAC;AAEnG,aAAO,IAAI,mBAAK,UAAU,CAAC,CAAC;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAKA,WAAW,MAA2B,aAAqC,YAAqB;AAC5F,YAAM,EAAE,UAAU,QAAQ,IAAI;AAE9B,UAAI,YAAY;AACZ,aAAK,aAAa,MAAM,OAAO;AAC/B;AAAA,MACJ;AAEA,WAAK,UAAU;AACf,WAAK,aAAa,MAAM,OAAO;AAE/B,WAAK,MAAM,YAAY,KAAK;AAC5B,WAAK,MAAM,OAAO,KAAK;AACvB,WAAK,MAAM,KAAK,aAAa,SAAU,KAAK,MAAM,KAAK,aAAa,gBAAgB,EAAsB,MAAM,CAAC;AAEjH,WAAK,MAAM,UAAU,SAAS,QAAQ,SAAS;AAC/C,WAAK,MAAM,UAAU,SAAS,QAAQ,IAAI,SAAS;AACnD,WAAK,MAAM,aAAa,KAAK,kBAAkB,SAAS;AACxD,WAAK,MAAM,aAAa,KAAK,6BAA6B,SAAS;AAInE,iBAAW,MAAM,KAAK,UAAU,IAAI,CAAC;AAAA,IACzC;AAAA,IAEQ,aAAa,MAA2B,SAAkB;AAC9D,UAAI;AACJ,UAAI,SAAS;AACT,mBAAW,IAAI,gCAAkB,EAAE,KAAK,QAAQ,CAAC;AAAA,MACrD,OAAO;AACH,mBAAW,IAAI,gCAAkB,EAAE,SAAS,GAAG,aAAa,KAAK,CAAC;AAAA,MACtE;AAEA,eAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACrC,aAAK,SAAS,KAAK,QAAQ;AAAA,MAC/B;AAAA,IACJ;AAAA,IAEA,kBAAkB,MAA2B,SAAiB;AAC1D,WAAK,SAAS,CAAC,EAAE,UAAU;AAC3B,WAAK,SAAS,CAAC,EAAE,cAAc,UAAU;AAAA,IAC7C;AAAA;AAAA;AAAA;AAAA,IAKA,aAAa;AACT,YAAM,IAAI,qBAAS,sDAAsD;AAAA,IAC7E;AAAA,IAEA,eAAe,aAAmC;AAC9C,kBAAY,SAAS,QAAQ;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOQ,UAAU,OAAO,OAAO;AAC5B,UAAI,CAAC,KAAK,MAAM,MAAM;AAClB;AAAA,MACJ;AAEA,YAAM,SAAS,KAAK,OAAO,SAAS;AACpC,aAAO,kBAAkB;AACzB,uBAAiB,iBAAiB,OAAO,kBAAkB,OAAO,kBAAkB;AACpF,cAAQ,wBAAwB,gBAAgB;AAEhD,YAAM,WAAyC,KAAK,OAAO,OAAO;AAClE,YAAM,mBAAmB,KAAK,MAAM,KAAK,aAAa,aAAa;AACnE,YAAM,cAAc,CAAC;AAErB,eAAS,MAAM,GAAG,MAAM,SAAS,MAAM,OAAO;AAC1C,iBAAS,MAAM,GAAG,MAAM,SAAS,MAAM,OAAO;AAK1C,gBAAM,gBAAgB,CAAC;AAEvB,cAAI,QAAQ,GAAG;AAEX,kBAAM,KAAK,KAAK,MAAM,eAAe,IAC/B,MAAM,KAAK,MAAM,aAAa,4BAA4B,IAC1D,KAAK,kBAAkB,6BAClB,KAAK,MAAM,aAAa,KAAK,KAAK,kBAAkB,sBACrD,MAAM,KAAK,MAAM,aAAa,sBAAsB;AAG9D,kBAAM,KAAK,KAAK,MAAM,eAAe,IAC/B,MAAM,KAAK,MAAM,aAAa,KAAK,4BAA4B,IAC/D,MAAM,KAAK,MAAM,aAAa,KAAK,sBAAsB;AAG/D,kBAAM,KAAK;AAEX,0BAAc,KAAK,IAAI,IAAI,EAAE;AAE7B,gBAAI,KAAK,MAAM,cAAc,KAAK,kBAAkB,GAAG;AAEnD,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK;AAE9C,4BAAc,KAAK,EAAE;AAAA,YACzB;AAEA,gBAAI,KAAK,MAAM,cAAc,KAAK,6BAA6B,GAAG;AAE9D,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAGrE,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAErE,4BAAc,KAAK,IAAI,EAAE;AAAA,YAC7B;AAAA,UACJ,WAAW,QAAQ,SAAS,OAAO,GAAG;AAElC,kBAAM,KAAK,KAAK,MAAM,eAAe,IAC/B,CAAC,KAAK,kBAAkB,4BACpB,MAAM,KAAK,MAAM,aAAa,KAAK,kBAAkB,sBACrD,MAAM,KAAK,MAAM,aAAa,4BAA4B,IAC9D,CAAC,KAAK,kBAAkB,4BACpB,MAAM,KAAK,MAAM,aAAa,KAAK,kBAAkB,sBACrD,MAAM,KAAK,MAAM,aAAa,sBAAsB;AAG9D,kBAAM,KAAK,KAAK,MAAM,eAAe,IAC/B,MAAM,KAAK,MAAM,aAAa,KAAK,4BAA4B,IAC/D,MAAM,KAAK,MAAM,aAAa,KAAK,sBAAsB;AAG/D,kBAAM,KAAK,KAAK,cAAc;AAE9B,0BAAc,KAAK,IAAI,IAAI,EAAE;AAE7B,gBAAI,KAAK,MAAM,cAAc,KAAK,kBAAkB,GAAG;AAEnD,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK;AAE9C,4BAAc,KAAK,EAAE;AAAA,YACzB;AAEA,gBAAI,KAAK,MAAM,cAAc,KAAK,6BAA6B,GAAG;AAE9D,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAGrE,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAErE,4BAAc,KAAK,IAAI,EAAE;AAAA,YAC7B;AAAA,UACJ,OAAO;AAEH,kBAAM,KAAK,CAAC,KAAK,kBAAkB,4BAC7B,MAAM,KAAK,MAAM,aAAa,KAAK,kBAAkB,sBACrD,MAAM,KAAK,MAAM,aAAa,sBAAsB;AAG1D,kBAAM,KAAK,MAAM,KAAK,MAAM,aAAa,KAAK,KAAK,kBAAkB,sBAAsB;AAG3F,kBAAM,KAAK,MAAM,KAAK,MAAM,aAAa,KAAK,sBAAsB;AAGpE,kBAAM,KAAK,MAAM,KAAK,MAAM,aAAa,KAAK,sBAAsB;AAEpE,0BAAc,KAAK,IAAI,IAAI,IAAI,EAAE;AAEjC,gBAAI,KAAK,MAAM,cAAc,KAAK,kBAAkB,GAAG;AAEnD,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK;AAG9C,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK;AAE9C,4BAAc,KAAK,IAAI,EAAE;AAAA,YAC7B;AAEA,gBAAI,KAAK,MAAM,cAAc,KAAK,6BAA6B,GAAG;AAE9D,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAGrE,oBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK,KAAK,kBAAkB;AAErE,4BAAc,KAAK,IAAI,EAAE;AAEzB,kBAAI,KAAK,MAAM,cAAc,KAAK,kBAAkB,GAAG;AAEnD,sBAAM,KAAK,KAAM,KAAK,MAAM,aAAa,IAAK;AAE9C,8BAAc,KAAK,EAAE;AAAA,cACzB;AAAA,YACJ;AAAA,UACJ;AAYA,gBAAM,gBAAgB,cAAc,KAAK,CAAC,cAAc;AACpD,2BAAe;AAAA,cACX,iBAAiB,KAAK,SAAS;AAAA,cAC/B,iBAAiB,KAAK,SAAS;AAAA,cAC/B,iBAAiB,KAAK,SAAS;AAAA,YACnC;AACA,2BAAe,WAAW,KAAK,OAAO,SAAS,gBAAgB;AAC/D,mBAAO,QAAQ,cAAc,cAAc;AAAA,UAC/C,CAAC;AAED,cAAI,eAAe;AACf,gBAAI,QAAQ,eAAe,QAAQ,KAAK,OAAO,MAAM,SAAS;AAC9D,gBAAI,QAAQ,KAAK,QAAQ,SAAS,OAAO,GAAG;AACxC,uBAAS;AAAA,YACb;AACA,wBAAY,KAAK,EAAE,KAAK,KAAK,MAAM,CAAC;AAAA,UACxC;AAAA,QACJ;AAAA,MACJ;AAEA,WAAK,YAAY,WAAW;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAKQ,YAAY,OAA8B;AAC9C,WAAK,MAAM,gBAAgB;AAE3B,YAAM,QAAQ,CAAC,SAAS;AACpB,cAAM,KAAK,OAAO,IAAI;AAEtB,YAAI,KAAK,MAAM,MAAM,EAAE,GAAG;AACtB,eAAK,MAAM,YAAY,IAAI,KAAK,KAAK;AAAA,QACzC,OAAO;AACH,eAAK,MAAM,MAAM,EAAE,IAAI;AACvB,eAAK,MAAM,QAAQ,IAAI,KAAK,IAAI,KAAK,OAAO,CAAC,SAAS,KAAK,WAAW,MAAM,IAAI,CAAC,CAAC;AAAA,QACtF;AAAA,MACJ,CAAC;AAED,WAAK,MAAM,MAAM;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA,IAKQ,WAAW,MAA2B,MAA0B;AACpE,YAAM,WAAyC,KAAK,OAAO,OAAO;AAClE,YAAM,MAAM,SAAS,QAAQ,KAAK,KAAK,KAAK,GAAG;AAE/C,UAAI,CAAC,KAAK;AACN,eAAO,QAAQ,QAAQ;AAAA,MAC3B;AAEA,aAAO,KAAK,YAAY,GAAG,EACtB,KAAK,CAAC,UAAU;AACb,YAAI,CAAC,KAAK,YAAY,GAAG;AACrB,gBAAM,WAAW,IAAI,gCAAkB,EAAE,KAAK,kBAAM,cAAc,KAAK,EAAE,CAAC;AAC1E,eAAK,eAAe,KAAK,KAAK,KAAK,KAAK,QAAQ;AAChD,eAAK,OAAO,YAAY;AAAA,QAC5B;AAAA,MACJ,CAAC,EACA,MAAM,MAAM;AACT,YAAI,CAAC,KAAK,YAAY,KAAK,KAAK,OAAO,eAAe;AAClD,cAAI,CAAC,KAAK,MAAM,eAAe;AAC3B,iBAAK,MAAM,gBAAgB,mBAAmB,KAAK,MAAM,SAAS,KAAK,MAAM,OAAO;AAAA,UACxF;AACA,eAAK,eAAe,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,aAAa;AAChE,eAAK,OAAO,YAAY;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACT;AAAA,IAEQ,YAAY,KAAwC;AACxD,UAAI,KAAK,QAAQ;AACb,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,eAAK,OAAO,KAAK,KAAK,SAAS,QAAW,MAAM;AAAA,QACpD,CAAC;AAAA,MACL,OAAO;AACH,eAAO,KAAK,OAAO,cAAc,UAAU,GAAG;AAAA,MAClD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAKQ,eAAe,KAAa,KAAa,UAA6B;AAC1E,YAAM,MAAM,KAAK,MAAM,KAAK,aAAa,OAAO;AAEhD,eAAS,IAAI,GAAG,IAAI,KAAK,MAAM,YAAY,KAAK;AAC5C,iBAAS,IAAI,GAAG,IAAI,KAAK,MAAM,YAAY,KAAK;AAE5C,gBAAM,UAAU,MAAM,KAAK,MAAM,aAAa;AAC9C,gBAAM,UAAU,MAAM,KAAK,MAAM,aAAa;AAC9C,gBAAM,aAAa,YAAY;AAC/B,gBAAM,YAAY,YAAa,KAAK,6BAA6B;AAGjE,cAAI;AACJ,cAAI,YAAY;AACZ,0BAAc,UAAU;AAAA,UAC5B,WAAW,WAAW;AAClB,0BAAc,KAAK,cACb,KAAK,kBAAkB,4BACvB,UAAU;AAAA,UACpB,OAAO;AACH,0BAAc,KAAK,kBAAkB,6BAC9B,UAAU,KAAK,KAAK,kBAAkB,sBACvC,UAAU;AAAA,UACpB;AAGA,gBAAM,WAAW,KAAK,MAAM,KAAK,OAAO,KAAK,CAAC,MAAM,EAAE,UAAU,WAAW,EAAE;AAC7E,eAAK,MAAM,UAAU,QAAQ,IAAI;AAGjC,gBAAM,MAAM,IAAI,IAAI,KAAK,MAAM;AAC/B,gBAAM,SAAS,KAAK,IAAI,KAAK,KAAK,MAAM;AACxC,gBAAM,OAAO,IAAI,KAAK,MAAM;AAC5B,gBAAM,SAAS,IAAI,KAAK,KAAK,MAAM;AAEnC,cAAI,YAAY;AACZ,gBAAI,MAAM,cAAc,OAAO,SAAS,GAAG,GAAG;AAC9C,gBAAI,MAAM,cAAc,GAAG,MAAM,MAAM;AACvC,gBAAI,MAAM,cAAc,GAAG,OAAO,MAAM;AAAA,UAC5C,WAAW,WAAW;AAClB,gBAAI,MAAM,aAAa,OAAO,GAAG;AACjC,gBAAI,MAAM,cAAc,GAAG,MAAM,GAAG;AACpC,gBAAI,MAAM,cAAc,IAAI,OAAO,SAAS,GAAG,MAAM;AAAA,UACzD,OAAO;AACH,gBAAI,MAAM,aAAa,OAAO,GAAG;AACjC,gBAAI,MAAM,cAAc,GAAG,MAAM,GAAG;AACpC,gBAAI,MAAM,cAAc,GAAG,OAAO,MAAM;AACxC,gBAAI,MAAM,cAAc,GAAG,MAAM,GAAG;AACpC,gBAAI,MAAM,cAAc,GAAG,MAAM,MAAM;AACvC,gBAAI,MAAM,cAAc,GAAG,OAAO,MAAM;AAAA,UAC5C;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,cAAc;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA,IAKQ,YAAY;AAChB,WAAK,MAAM,MAAM;AACjB,WAAK,MAAM,QAAQ,CAAC;AAEpB,WAAK,MAAM,UAAU,QAAQ,CAAC,QAAQ;AAClC,aAAK,KAAK,QAAQ;AAClB,aAAK,QAAQ;AAAA,MACjB,CAAC;AACD,WAAK,MAAM,UAAU,SAAS;AAAA,IAClC;AAAA,EACJ;AAhhBI,EADS,4BACgB,KAAK;AAC9B,EAFS,4BAEgB,mBAAmB;AAC5C,EAHS,4BAGgB,kBAAkB;","names":["import_three"]}