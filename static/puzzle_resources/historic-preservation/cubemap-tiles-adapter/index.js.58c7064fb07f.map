{"version":3,"sources":["@photo-sphere-viewer/core","@photo-sphere-viewer/cubemap-adapter","three","src/index.ts","src/CubemapTilesAdapter.ts","../shared/Queue.ts","../shared/tiles-utils.ts"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = PhotoSphereViewer.CubemapAdapter","module.exports = THREE","export { CubemapTilesAdapter } from './CubemapTilesAdapter';\nexport * from './model';\n","import type { TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractAdapter, CONSTANTS, events, PSVError, utils } from '@photo-sphere-viewer/core';\nimport { CubemapAdapter } from '@photo-sphere-viewer/cubemap-adapter';\nimport {\n    BoxGeometry,\n    BufferAttribute,\n    Frustum,\n    ImageLoader,\n    MathUtils,\n    Matrix4,\n    Mesh,\n    MeshBasicMaterial,\n    Texture,\n    Vector2,\n    Vector3,\n} from 'three';\nimport { Queue, Task } from '../../shared/Queue';\nimport { buildErrorMaterial } from '../../shared/tiles-utils';\nimport { CubemapTilesAdapterConfig, CubemapTilesPanorama } from './model';\n\ntype CubemapMesh = Mesh<BoxGeometry, MeshBasicMaterial[]>;\ntype CubemapTexture = TextureData<Texture[]>;\ntype CubemapTile = { face: number; col: number; row: number; angle: number };\n\nconst CUBE_SEGMENTS = 16;\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\n\nconst CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile: CubemapTile) {\n    return `${tile.face}:${tile.col}x${tile.row}`;\n}\n\nconst getConfig = utils.getConfigParser<CubemapTilesAdapterConfig>({\n    flipTopBottom: false,\n    showErrorTile: true,\n    baseBlur: true,\n    blur: false,\n});\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n/**\n * Adapter for tiled cubemaps\n */\nexport class CubemapTilesAdapter extends AbstractAdapter<CubemapTilesPanorama, Texture[]> {\n    static override readonly id = 'cubemap-tiles';\n    static override readonly supportsDownload = false;\n    static override readonly supportsOverlay = false;\n\n    private readonly config: CubemapTilesAdapterConfig;\n\n    private readonly state = {\n        tileSize: 0,\n        facesByTile: 0,\n        tiles: {} as Record<string, boolean>,\n        geom: null as BoxGeometry,\n        materials: [] as MeshBasicMaterial[],\n        errorMaterial: null as MeshBasicMaterial,\n    };\n\n    private adapter: CubemapAdapter;\n    private readonly queue = new Queue();\n    private readonly loader?: ImageLoader;\n\n    constructor(viewer: Viewer, config: CubemapTilesAdapterConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        if (this.viewer.config.requestHeaders) {\n            utils.logWarn(\n                'CubemapTilesAdapter fallbacks to file loader because \"requestHeaders\" where provided. ' +\n                    'Consider removing \"requestHeaders\" if you experience performances issues.'\n            );\n        } else {\n            this.loader = new ImageLoader();\n            if (this.viewer.config.withCredentials) {\n                this.loader.setWithCredentials(true);\n            }\n        }\n\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n\n        this.__cleanup();\n\n        this.state.errorMaterial?.map?.dispose();\n        this.state.errorMaterial?.dispose();\n\n        delete this.state.geom;\n        delete this.state.errorMaterial;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.PositionUpdatedEvent || e instanceof events.ZoomUpdatedEvent) {\n            this.__refresh();\n        }\n    }\n\n    override supportsTransition(panorama: CubemapTilesPanorama) {\n        return !!panorama.baseUrl;\n    }\n\n    override supportsPreload(panorama: CubemapTilesPanorama) {\n        return !!panorama.baseUrl;\n    }\n\n    override loadTexture(panorama: CubemapTilesPanorama): Promise<CubemapTexture> {\n        if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\n            return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n        }\n        if (panorama.nbTiles > CUBE_SEGMENTS) {\n            return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\n        }\n        if (!MathUtils.isPowerOfTwo(panorama.nbTiles)) {\n            return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\n        }\n\n        if (panorama.baseUrl) {\n            if (!this.adapter) {\n                if (!CubemapAdapter) {\n                    throw new PSVError('CubemapTilesAdapter requires CubemapAdapter');\n                }\n\n                this.adapter = new CubemapAdapter(this.viewer, {\n                    blur: this.config.baseBlur,\n                });\n            }\n\n            return this.adapter.loadTexture(panorama.baseUrl).then((textureData) => ({\n                panorama: panorama,\n                texture: textureData.texture,\n            }));\n        } else {\n            return Promise.resolve({ panorama, texture: null });\n        }\n    }\n\n    createMesh(scale = 1): CubemapMesh {\n        const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n        const geometry = new BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\n            .scale(1, 1, -1)\n            .toNonIndexed() as BoxGeometry;\n\n        geometry.clearGroups();\n        for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\n            geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n        }\n\n        geometry.setAttribute(ATTR_ORIGINAL_UV, (geometry.getAttribute(ATTR_UV) as BufferAttribute).clone());\n\n        return new Mesh(geometry, []);\n    }\n\n    /**\n     * Applies the base texture and starts the loading of tiles\n     */\n    setTexture(mesh: CubemapMesh, textureData: CubemapTexture, transition: boolean) {\n        const { panorama, texture } = textureData;\n\n        if (transition) {\n            this.__setTexture(mesh, texture);\n            return;\n        }\n\n        this.__cleanup();\n        this.__setTexture(mesh, texture);\n\n        this.state.materials = mesh.material;\n        this.state.geom = mesh.geometry;\n        this.state.geom.setAttribute(ATTR_UV, (this.state.geom.getAttribute(ATTR_ORIGINAL_UV) as BufferAttribute).clone());\n\n        this.state.tileSize = panorama.faceSize / panorama.nbTiles;\n        this.state.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\n\n        // this.psv.renderer.scene.add(createWireFrame(this.state.geom));\n\n        setTimeout(() => this.__refresh(true));\n    }\n\n    private __setTexture(mesh: CubemapMesh, texture: Texture[]) {\n        for (let i = 0; i < 6; i++) {\n            let material;\n            if (texture) {\n                if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n                    texture[i].center = new Vector2(0.5, 0.5);\n                    texture[i].rotation = Math.PI;\n                }\n\n                material = new MeshBasicMaterial({ map: texture[i] });\n            } else {\n                material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n            }\n\n            for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n                mesh.material.push(material);\n            }\n        }\n    }\n\n    setTextureOpacity(mesh: CubemapMesh, opacity: number) {\n        for (let i = 0; i < 6; i++) {\n            mesh.material[i * NB_GROUPS_BY_FACE].opacity = opacity;\n            mesh.material[i * NB_GROUPS_BY_FACE].transparent = opacity < 1;\n        }\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     */\n    setOverlay(): void {\n        throw new PSVError('EquirectangularTilesAdapter does not support overlay');\n    }\n\n    disposeTexture(textureData: CubemapTexture) {\n        textureData.texture?.forEach((texture) => texture.dispose());\n    }\n\n    /**\n     * Compute visible tiles and load them\n     */\n    // @ts-ignore unused paramater\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private __refresh(init = false) {\n        if (!this.state.geom) {\n            return;\n        }\n\n        const camera = this.viewer.renderer.camera;\n        camera.updateMatrixWorld();\n        projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        frustum.setFromProjectionMatrix(projScreenMatrix);\n\n        const panorama: CubemapTilesPanorama = this.viewer.config.panorama;\n        const verticesPosition = this.state.geom.getAttribute(ATTR_POSITION) as BufferAttribute;\n        const tilesToLoad: CubemapTile[] = [];\n\n        for (let face = 0; face < 6; face++) {\n            for (let col = 0; col < panorama.nbTiles; col++) {\n                for (let row = 0; row < panorama.nbTiles; row++) {\n                    // for each tile, find the vertices corresponding to the four corners\n                    // if at least one vertex is visible, the tile must be loaded\n                    // for larger tiles we also test the four edges centers and the tile center\n                    const verticesIndex = [];\n\n                    // top-left\n                    const v0 = face * NB_VERTICES_BY_PLANE\n                        + row * this.state.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\n                        + col * this.state.facesByTile * NB_VERTICES_BY_FACE;\n\n                    // bottom-left\n                    const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.state.facesByTile - 1) + 1;\n\n                    // bottom-right\n                    const v2 = v1 + this.state.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n                    // top-right\n                    const v3 = v0 + this.state.facesByTile * NB_VERTICES_BY_FACE - 1;\n\n                    verticesIndex.push(v0, v1, v2, v3);\n\n                    if (this.state.facesByTile >= CUBE_SEGMENTS / 2) {\n                        // top-center\n                        const v4 = v0 + (this.state.facesByTile / 2) * NB_VERTICES_BY_FACE - 1;\n\n                        // bottom-center\n                        const v5 = v1 + (this.state.facesByTile / 2) * NB_VERTICES_BY_FACE - 3;\n\n                        // left-center\n                        const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.state.facesByTile / 2 - 1) + 1;\n\n                        // right-center\n                        const v7 = v6 + this.state.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n                        // center-center\n                        const v8 = v6 + (this.state.facesByTile / 2) * NB_VERTICES_BY_FACE;\n\n                        verticesIndex.push(v4, v5, v6, v7, v8);\n                    }\n\n                    // if (init && face === 5 && col === 0 && row === 0) {\n                    //   verticesIndex.forEach((vertexIdx) => {\n                    //     this.psv.renderer.scene.add(createDot(\n                    //       verticesPosition.getX(vertexIdx),\n                    //       verticesPosition.getY(vertexIdx),\n                    //       verticesPosition.getZ(vertexIdx)\n                    //     ));\n                    //   });\n                    // }\n\n                    const vertexVisible = verticesIndex.some((vertexIdx) => {\n                        vertexPosition.set(\n                            verticesPosition.getX(vertexIdx),\n                            verticesPosition.getY(vertexIdx),\n                            verticesPosition.getZ(vertexIdx)\n                        );\n                        vertexPosition.applyEuler(this.viewer.renderer.sphereCorrection);\n                        return frustum.containsPoint(vertexPosition);\n                    });\n\n                    if (vertexVisible) {\n                        const angle = vertexPosition.angleTo(this.viewer.state.direction);\n                        tilesToLoad.push({ face, col, row, angle });\n                    }\n                }\n            }\n        }\n\n        this.__loadTiles(tilesToLoad);\n    }\n\n    /**\n     * Loads tiles and change existing tiles priority\n     */\n    private __loadTiles(tiles: CubemapTile[]) {\n        this.queue.disableAllTasks();\n\n        tiles.forEach((tile) => {\n            const id = tileId(tile);\n\n            if (this.state.tiles[id]) {\n                this.queue.setPriority(id, tile.angle);\n            } else {\n                this.state.tiles[id] = true;\n                this.queue.enqueue(new Task(id, tile.angle, (task) => this.__loadTile(tile, task)));\n            }\n        });\n\n        this.queue.start();\n    }\n\n    /**\n     * Loads and draw a tile\n     */\n    private __loadTile(tile: CubemapTile, task: Task): Promise<any> {\n        const panorama = this.viewer.config.panorama;\n\n        let { col, row } = tile;\n        if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\n            col = panorama.nbTiles - col - 1;\n            row = panorama.nbTiles - row - 1;\n        }\n        const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\n\n        if (!url) {\n            return Promise.resolve();\n        }\n\n        return this.__loadImage(url)\n            .then((image) => {\n                if (!task.isCancelled()) {\n                    const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n                    this.__swapMaterial(tile.face, tile.col, tile.row, material);\n                    this.viewer.needsUpdate();\n                }\n            })\n            .catch(() => {\n                if (!task.isCancelled() && this.config.showErrorTile) {\n                    if (!this.state.errorMaterial) {\n                        this.state.errorMaterial = buildErrorMaterial(this.state.tileSize, this.state.tileSize);\n                    }\n                    this.__swapMaterial(tile.face, tile.col, tile.row, this.state.errorMaterial);\n                    this.viewer.needsUpdate();\n                }\n            });\n    }\n\n    private __loadImage(url: string): Promise<HTMLImageElement> {\n        if (this.loader) {\n            return new Promise((resolve, reject) => {\n                this.loader.load(url, resolve, undefined, reject);\n            });\n        } else {\n            return this.viewer.textureLoader.loadImage(url);\n        }\n    }\n\n    /**\n     * Applies a new texture to the faces\n     */\n    private __swapMaterial(face: number, col: number, row: number, material: MeshBasicMaterial) {\n        const uvs = this.state.geom.getAttribute(ATTR_UV) as BufferAttribute;\n\n        for (let c = 0; c < this.state.facesByTile; c++) {\n            for (let r = 0; r < this.state.facesByTile; r++) {\n                // position of the face (two triangles of the same square)\n                const faceCol = col * this.state.facesByTile + c;\n                const faceRow = row * this.state.facesByTile + r;\n\n                // first vertex for this face (6 vertices in total)\n                const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\n\n                // swap material\n                const matIndex = this.state.geom.groups.find((g) => g.start === firstVertex).materialIndex;\n                this.state.materials[matIndex] = material;\n\n                // define new uvs\n                let top = 1 - r / this.state.facesByTile;\n                let bottom = 1 - (r + 1) / this.state.facesByTile;\n                let left = c / this.state.facesByTile;\n                let right = (c + 1) / this.state.facesByTile;\n\n                if (this.config.flipTopBottom && (face === 2 || face === 3)) {\n                    top = 1 - top;\n                    bottom = 1 - bottom;\n                    left = 1 - left;\n                    right = 1 - right;\n                }\n\n                uvs.setXY(firstVertex, left, top);\n                uvs.setXY(firstVertex + 1, left, bottom);\n                uvs.setXY(firstVertex + 2, right, top);\n                uvs.setXY(firstVertex + 3, left, bottom);\n                uvs.setXY(firstVertex + 4, right, bottom);\n                uvs.setXY(firstVertex + 5, right, top);\n            }\n        }\n\n        uvs.needsUpdate = true;\n    }\n\n    /**\n     * Clears loading queue, dispose all materials\n     */\n    private __cleanup() {\n        this.queue.clear();\n        this.state.tiles = {};\n\n        this.state.materials.forEach((mat) => {\n            mat?.map?.dispose();\n            mat?.dispose();\n        });\n        this.state.materials.length = 0;\n    }\n}\n","/**\n * @internal\n */\nconst enum Status {\n    DISABLED,\n    PENDING,\n    RUNNING,\n    CANCELLED,\n    DONE,\n    ERROR,\n}\n\n/**\n * @internal\n */\nexport class Task {\n    status: Status = Status.PENDING;\n\n    constructor(\n        public readonly id: string,\n        public priority: number,\n        private readonly fn: (task: Task) => Promise<any>\n    ) {}\n\n    start() {\n        this.status = Status.RUNNING;\n        return this.fn(this).then(\n            () => {\n                this.status = Status.DONE;\n            },\n            () => {\n                this.status = Status.ERROR;\n            }\n        );\n    }\n\n    cancel() {\n        this.status = Status.CANCELLED;\n    }\n\n    isCancelled() {\n        return this.status === Status.CANCELLED;\n    }\n}\n\n/**\n * @internal\n */\nexport class Queue {\n    private runningTasks: Record<string, boolean> = {};\n    private tasks: Record<string, Task> = {};\n\n    constructor(private readonly concurency = 4) {}\n\n    enqueue(task: Task) {\n        this.tasks[task.id] = task;\n    }\n\n    clear() {\n        Object.values(this.tasks).forEach((task) => task.cancel());\n        this.tasks = {};\n        this.runningTasks = {};\n    }\n\n    setPriority(taskId: string, priority: number) {\n        const task = this.tasks[taskId];\n        if (task) {\n            task.priority = priority;\n            if (task.status === Status.DISABLED) {\n                task.status = Status.PENDING;\n            }\n        }\n    }\n\n    disableAllTasks() {\n        Object.values(this.tasks).forEach((task) => {\n            task.status = Status.DISABLED;\n        });\n    }\n\n    start() {\n        if (Object.keys(this.runningTasks).length >= this.concurency) {\n            return;\n        }\n\n        const nextTask = Object.values(this.tasks)\n            .filter((task) => task.status === Status.PENDING)\n            .sort((a, b) => b.priority - a.priority)\n            .pop();\n\n        if (nextTask) {\n            this.runningTasks[nextTask.id] = true;\n\n            nextTask.start().then(() => {\n                if (!nextTask.isCancelled()) {\n                    delete this.tasks[nextTask.id];\n                    delete this.runningTasks[nextTask.id];\n                    this.start();\n                }\n            });\n\n            this.start(); // start tasks until max concurrency is reached\n        }\n    }\n}\n","import {\n    BufferGeometry,\n    CanvasTexture,\n    LineSegments,\n    Material,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    SphereGeometry,\n    WireframeGeometry,\n} from 'three';\n\n/**\n * Generates an material for errored tiles\n * @internal\n */\nexport function buildErrorMaterial(width: number, height: number): MeshBasicMaterial {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = '#333';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.font = `${canvas.width / 5}px serif`;\n    ctx.fillStyle = '#a22';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n    const texture = new CanvasTexture(canvas);\n    return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * Creates a wireframe geometry, for debug\n * @internal\n */\nexport function createWireFrame(geometry: BufferGeometry): Object3D {\n    const wireframe = new WireframeGeometry(geometry);\n    const line = new LineSegments<WireframeGeometry, Material>(wireframe);\n    line.material.depthTest = false;\n    line.material.opacity = 0.25;\n    line.material.transparent = true;\n    return line;\n}\n\n/**\n * Creates a small red sphere, for debug\n * @internal\n */\nexport function createDot(x: number, y: number, z: number) {\n    const geom = new SphereGeometry(0.1);\n    const material = new MeshBasicMaterial({ color: 0xff0000 });\n    const mesh = new Mesh(geom, material);\n    mesh.position.set(x, y, z);\n    return mesh;\n}\n"],"mappings":"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","names":["import_three"]}